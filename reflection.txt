My application idea was inspired by the need for a lightweight, user-based chat system that could serve as both a personal communication tool and a scalable foundation for larger platforms. I incorporated creativity by designing a simple yet functional frontend and backend system that could be easily deployed and tested without relying on heavy frameworks. The UI was minimal but intuitive, and the backend ensured that user data and message history were securely handled.

One major challenge was orchestrating the microservices architecture without using Docker Compose. Manually creating a user-defined bridge network and starting each container with the correct network configuration and port mappings was error-prone. I overcame this by documenting each step, naming containers clearly, and verifying container status with `docker ps` and Docker Desktop.

Docker's networking feature made inter-container communication seamless, especially between the backend and the MySQL database. Volumes ensured data persistence, which was essential for MySQL. Multi-stage builds helped optimize the frontend container size by separating build-time dependencies from the final image, reducing deployment size and improving performance.

In a production environment, the application could be extended by adding user authentication (JWT), real-time messaging using WebSockets, and a Redis cache for performance. Using Docker Compose or Kubernetes would greatly simplify scaling and orchestration, and adding automated CI/CD pipelines would ensure continuous delivery and testing.
